#!/usr/bin/perl
# Parse tpr infomration to psf file
# Eric Lai 2/27/2015
# ahtsung@gmail.com

$GMS=`which gmxdump`;
chop $GMS;

$constraint_tag=1;

for($i=0;$i<$#ARGV;$i++){
	if($ARGV[$i] =~ /\-i/){
		$input_file=$ARGV[$i+1];
	}
	elsif($ARGV[$i] =~ /\-o/){
		$output_file=$ARGV[$i+1];
	}
	elsif($ARGV[$i] =~ /\-s/){
		if($ARGV[$i+1] eq 'Y' || $ARGV[$i+1] eq 'y'){
			$sort_tag=1;
		}
	}
	elsif($ARGV[$i] =~ /\-c/){
                if($ARGV[$i+1] eq 'N' || $ARGV[$i+1] eq 'n'){
                        $constraint_tag=0;
                }
        }
	elsif($ARGV[$i] =~ /\-e/){
		if($GMS eq ''){
                	$GMS=$ARGV[$i+1];
		}
        }
}

if($input_file eq '' || $output_file eq '' || $GMS eq ''){
	print "\n\n";
	print "================================================================================================\n";
	print "                                 Parse Gromacs TPR file to VMD PSF file                         \n";
	print "------------------------------------------------------------------------------------------------\n";
	print "      tpr2psf -i [inputfile]     ;Input tpr file                                                \n";
	print "              -o [ouputfile]     ;Output psf file                                               \n";
	print "              -s [Y|N]           ;Sorting bond, angle, and dihedral (Y or N, default N)         \n";
	print "              -c [Y|N]           ;Include constraint as bond (Y or N, default Y)                \n";
	print "              -e [gmxdump path]  ;Gromacs gmxdump path, specify this when script can't file it. \n\n";
	print "      Example: tpr2psf -i A.tpr -o B.psf -s Y                                                   \n";
	print "================================================================================================\n\n";
}
else{
	print "Execute gmxdump...\n";
	system("$GMS -s $input_file -sys > _temp.txt; clear");

	print "Reading tpr file...\n";

	open (IN,"_temp.txt");
	while(<IN>){
		#atom[     1]={type=  1, typeB=  1, ptype=    Atom, m= 2.40000e+01, q= 4.60000e-01, mB= 2.40000e+01, qB= 4.60000e-01, resind=    0, atomnumber= -1}
		if(/atom\[(.+)\]\=\{type\=.+m\=(.+)\,\sq\=(.+)\,\smB\=.+\,\sqB\=.+\,\sresind\=(.+)\,\satomnumber/){
			$atom_no=0+$1;
			$atom_mass=sprintf("%.4f",0+$2);
			$atom_charge=sprintf("%.6f",0+$3);
			$res_no=0+$4;

			push @atom_no, $atom_no;
			push @atom_mass, $atom_mass;
			push @atom_charge, $atom_charge;
			push @res_no, $res_no;
			#print "$atom_charge ";
		}
		# atom[0]={name="W"}
		elsif(/atom\[.+]\=\{name\=\"(.+)\"\}/){
			$atom_name=$1;
			push @atom_name, $atom_name;
		}
		#type[0]={name="POL",nameB="POL"}
		elsif(/type\[.+\]\=\{name\=\"(.+)\"\,/){
			$atom_type=$1;
			push @atom_type, $atom_type;
		}
		
		#residue[0]={name="PW", nr=1, ic=' '}
		elsif(/residue\[(.+)\]\=\{name\=\"(.+)\"\,/){
			#$res_id=0+$1;
			$res_name=$2;
			push @res_name,$res_name;
		}
		#0 type=18 (BONDS) 1500 1501
		elsif(/(.+)\stype\=.+\s\(BONDS\)\s(.+)\s(.+)/){
			push @bond_x,$2;
			push @bond_y,$3;
		}
		#0 type=17 (CONSTR) 0 1
		elsif(/(.+)\stype\=.+\s\(CONSTR\)\s(.+)\s(.+)/){
			if($constraint_tag==1){
				push @bond_x,$2;
                        	push @bond_y,$3;
			}
                }
	}
	close IN;

	print "Finish reading tpr file\n";

	if($#atom_no != $#atom_mass || $#atom_no != $#atom_charge || $#atom_no != $#atom_name || $#atom_no != $#atom_type){
		print "Something is wrong, check the tpr file\n";
	}
	else{
		open (OUT,">$output_file");
		
		if($sort_tag ==1){
			print "Start to sort the bond, angle, dihedral information\n";
			print "Start to sort ",$#bond_x+1," bonds\n";
		#sorting
			for($i=0;$i<$#bond_x;$i++){
				for($j=$i+1; $j<=$#bond_x;$j++){
					if($bond_x[$i] > $bond_x[$j]){
						($bond_x[$i], $bond_x[$j]) = ($bond_x[$j], $bond_x[$i]);
                                		($bond_y[$i], $bond_y[$j]) = ($bond_y[$j], $bond_y[$i]);
					}
				}
			}
		}

		print OUT "      2 !NTITLE\n";
		print OUT "REMARKS psf generated by tpr2psf.pl\n";
		print OUT "REMARKS \n";
		printf OUT "%7d !NATOM\n", $#atom_no+1;

		for($i=0;$i<=$#atom_no;$i++){
			printf OUT "%7d", $atom_no[$i]+1;
			printf OUT " A ";
			printf OUT "%8d ", $res_no[$i]+1;
			printf OUT " %3s ", $res_name[$res_no[$i]];
			printf OUT " %3s ", $atom_name[$i];
			printf OUT " %3s ", $atom_type[$i];
			printf OUT " %9s ", $atom_charge[$i];
			printf OUT " %8s ", $atom_mass[$i];
			print OUT "     0\n";	
		}
		printf OUT "%7d !NBOND: bonds\n", $#bond_x+1;
		for($i=0;$i<=$#bond_x;$i++){
			printf OUT "%7s %7s ", $bond_x[$i]+1, $bond_y[$i]+1;
			$count++;
			if($count % 4 == 0 && $count >=4){
				print OUT "\n";
			}

		}
		print OUT "\n";
		printf OUT "%7d !NTHETA: angles\n";
		print OUT "\n";
		printf OUT "%7d !NPHI: dihedrals\n";
                print OUT "\n";
		printf OUT "%7d !NIMPHI: impropers\n";
                print OUT "\n";
		printf OUT "%7d !NCRTERM: cross-terms\n";
                print OUT "\n";
	}
close OUT;
print "Done. Check $output_file\n\n";
system("rm _temp.txt");
}	



